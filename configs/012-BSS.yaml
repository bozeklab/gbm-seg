trainer:
  model:
    # unet_3d, unet_3d_ss unet_3d_me
    name: unet_3d_ss
    # Huge: [128, 256, 512, 1024]
    # Big: [64, 128, 256, 512]
    # Medium: [64, 128, 256]
    # Small: [32, 64, 128]
    # Tiny: [16, 32, 64]
    feature_maps: [16, 32, 64]
    # 0: Nephrin
    # 1: WGA
    # 2: Collagen4
    channels: [0, 1, 2]
    # The kernel size and padding should
    # make sense and produces the same dimensions
    # as output at the end.
    encoder_kernel: [3, 3, 3]
    encoder_padding: 'same'
    decoder_kernel: [3, 3, 3]
    decoder_padding: 'same'

  optim:
    name: adam
    lr : 0.0001

  loss: CrossEntropy
  loss_weights: [1.0, 7.0]
  metrics: [accuracy, ]
  # Every report_freq batches, metrics and losses will be logged
  report_freq: 10

  metrics: [
            'Loss',
            'Accuracy',
           #'Pervalence',
            'BalancedAccuracy',
            'TruePositiveRate',
            'TrueNegativeRate',
            'FalsePositiveRate',
            'FalseNegativeRate',
            'PositivePredictiveValue',
            'NegativePredictiveValue',
           #'FalseDiscoveryRate',
           #'FalseOmissionRate',
           #'PositiveLikelihoodRatio',
           #'NegativeLikelihoodRatio',
            'Dice',
            'JaccardIndex',
           ]

  metrics_class_ids: [1]

  epochs: 30
  # Every save_interval a snapshot will be created
  save_interval: 10
  snapshot_path: ./snapshots/

  result_path: ./results-train/

  unlabeled_ds:
    path: ./data/gbm_unlabeled_ds/
    batch_size: 16
    sample_dimension: [12, 256, 256] # Z, X, Y
    pixel_stride: [1, 256, 256] # Z, X, Y
    pin_memory: True
    # shuffle should be off when using DDP
    shuffle: False
    # Use this if the order of channels is
    # Different, for example use [1, 0, 2]
    # If the first channel is WGA and second is nephrin
    channel_map: [0, 1, 2]
    ignore_stride_mismatch: False
    workers: 0
    scale_factor: 6

  train_ds:
    path: ./data/gbm_train_ds/
    batch_size: 16
    sample_dimension: [12, 256, 256] # Z, X, Y
    pixel_stride: [1, 64, 64] # Z, X, Y
    pin_memory: True
    # shuffle should be off when using DDP
    shuffle: False
    # Use this if the order of channels is
    # Different, for example use [1, 0, 2]
    # If the first channel is WGA and second is nephrin
    channel_map: [0, 2, 1]
    ignore_stride_mismatch: True
    workers: 8

  valid_ds:
    path: ./data/gbm_valid_ds/
    batch_size: 16
    sample_dimension: [12, 256, 256] # Z, X, Y
    pixel_stride: [1, 256, 256] # Z, X, Y
    pin_memory: True
    # shuffle should be off when using DDP
    shuffle: False
    # Use this if the order of channels is
    # Different, for example use [1, 0, 2]
    # If the first channel is WGA and second is nephrin
    channel_map: [0, 2, 1]
    ignore_stride_mismatch: True
    workers: 8

  visualization:
    enabled: True
    # The chance for a batch to create visualization
    chance: 0.30
    path: ./visuals/
    gif: True
    tif: True
    mesh: False

  profiling:
    enabled: False
    path: ./profiling/
    save:
      tensorboard: True
      text: False
      print: False
    profile_memory: True
    record_shapes: True
    with_flops: True
    with_stack: False
    scheduler:
      wait: 10
      warmup: 10
      active: 4
      repeat: 4

  tensorboard:
    enabled: True
    path: ./tensorboard/

  device: cuda
  mixed_precision: True
  cudnn_benchmark: False

  dp: False

  ddp:
    enabled: False
    no_of_nodes: 2
    rdzv_backend: c10d
    rdzv_endpoint: 192.168.227.235:29603

inference:
  model:
    # unet_3d, unet_3d_ss unet_3d_me
    name: unet_3d_ss
    # Of course it should be the same as the checkpoint
    feature_maps: [16, 32, 64]
    # 0: Nephrin
    # 1: WGA
    # 2: Collagen4
    channels: [0, 1, 2]

  number_class: 2
  snapshot_path: '/data/afatehi/unet_3d_ss-adam-CrossEntropy-012-163264-009.pt'
  device: cuda

  save_npy: False

  result_dir: /data/afatehi/gbm/results-infer/

  inference_ds:
    path: '/data/afatehi/infer/'
    batch_size: 16
    sample_dimension: [6, 512, 512]
    pixel_stride: [1, 256, 256]
    pin_memory: True
    # Use this if the order of channels is
    # Different, for example use [1, 0, 2]
    # If the first channel is WGA and second is nephrin
    channel_map: [0, 2, 1]
    scale_factor: 1
    workers: 8

logging:
  log_level: DEBUG
  log_file: logs/train.log
  log_std: True
  log_summary: False

# All other pathes are relative to root_path
root_path: /data/afatehi/gbm/
